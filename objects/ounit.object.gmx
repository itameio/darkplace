<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create
name = "unit";
age = noone;

//
spd = 15;
wspd = 5;

//
target = noone;
master = noone;
action = noone
//
main_col = c_yellow;
sec_col = c_red;
theme_col = c_aqua;
//
grid = o.grid
path = noone
radd = instance_create(x, y, orad)
radd.master = id;
insight = false;
turn = 0
x3 = noone
y3 = noone;
diff = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///step

//stop unit from exiting room borders
if(y &lt; 0 ){y = 0}

else if(y &gt; room_height){y = room_height;}

if(x &lt; 0){x = 0;}

else if(x &gt; room_width){x = room_width;}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw

unit_width = sprite_get_width(sblock)
unit_height = sprite_get_height(sblock)

draw_set_color(main_col);
draw_circle(x, y, 32, false);


draw_set_color(sec_col);
draw_arrow(x, y, x + lengthdir_x(32, direction), y + lengthdir_y(32, direction), 32);

//highlight unit
if(point_in_rectangle(mouse_x, mouse_y, x - unit_width/2, y - unit_height/2, x + unit_width/2, y + unit_height/2)){
    draw_set_color(theme_col);
    draw_rectangle(x - unit_width/2, y - unit_height/2, x + unit_width/2, y + unit_height/2, false);
    if(exists(radd)){
        radd.draw = true;
    }
} else {
    if(exists(radd)){
        radd.draw = false;
    }
}





if(exists(target)){

    //draw path and path points
    draw_set_color(c_white)
    if(path_exists(path)){
    
        draw_path(path, x, y, true)
        
        
        var i;
        points = floor(path_get_number(path));
        for(i=0;i&lt;points;i++){
            rad = 20;
            x_ = path_get_point_x(path, i);
            y_ = path_get_point_y(path, i);
            
            if(point_in_rectangle(mouse_x, mouse_y, x_ - rad, y_ - rad, x_ + rad, y_ + rad)){
                draw_circle(x_, y_, rad, false)
                draw_text(x_ - rad, y_ - rad * 2, string(i) + "/" + string(points-1))
            }
            
            draw_circle(x_, y_, rad/3, false)
        }
        
        
    }
    //check if target is in sight
    if(collision_line(x, y, target.x, target.y, oblock, true, true) != noone){insight = false;} else {insight = true;};
    if(!insight){draw_set_color(c_red)} else {draw_set_color(theme_col)}
    draw_line(x, y, target.x, target.y)

}





if(o.debug and exists(radd)){
    
    var width = 20;
    
    var x2 = lengthdir_x(radd.rad, direction - width)
    var y2 = lengthdir_y(radd.rad, direction - width)
    
    var x1 = lengthdir_x(radd.rad, direction + width)
    var y1 = lengthdir_y(radd.rad, direction + width)
    
    var dir = direction;
    
    if(x3 == noone){x3 = x1;}
    if(y3 == noone){y3 = y1;}
    
    
    
    if(diff &lt; -width){
    
        turn = 1;
        draw_set_color(c_aqua)
    } 
    
    if(diff &gt; width){
    
        turn = 0;
        draw_set_color(c_white)
    } 
    
    x3 = lengthdir_x(radd.rad, (dir) + diff)
    y3 = lengthdir_y(radd.rad, (dir) + diff)
    
    if(turn == 0){
        diff--;
    } else 
    
    if(turn == 1){
        diff++;
    }
    

    draw_line(x, y, x + x1, y + y1)
    draw_line(x, y, x + x2, y + y2)
    
    draw_set_alpha(0.3)
    draw_triangle(x, y, x+ x1, y + y1, x + x2, y + y2, false)
    draw_set_alpha(1)
    //draw_circle(x, y, radd.rad, true)
    
    if(collision_line(x, y, x3, y3, ounit, true, true)){
        draw_set_color(c_lime)
    }
    
    draw_arrow(x, y, x + x3, y + y3, 25)
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
