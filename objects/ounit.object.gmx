<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sunit</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oent</parentName>
  <maskName>sbbox</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create
event_inherited()
name = "unit";
age = noone;

//detection
base_frequency = 12;
frequency = base_frequency;
dir = direction;
//stats
hp_body[head] = 100;
hp_body[neck] = 100;
hp_body[chest] = 100;
hp_body[abdomen] = 100;
hp_body[r_eye] = 100;
hp_body[l_eye] = 100;
hp_body[r_ear] = 100;
hp_body[l_ear] = 100;
hp_body[r_shoulder] = 100;
hp_body[l_shoulder] = 100;
hp_body[r_arm] = 100;
hp_body[l_arm] = 100;
hp_body[r_elbow] = 100;
hp_body[l_elbow] = 100;
hp_body[r_wrist] = 100;
hp_body[l_wrist] = 100;
hp_body[r_hand] = 100;
hp_body[l_hand] = 100;
hp_body[r_thigh] = 100;
hp_body[l_thigh] = 100;
hp_body[r_leg] = 100;
hp_body[l_leg] = 100;
hp_body[r_knee] = 100;
hp_body[l_knee] = 100;
hp_body[r_foot] = 100;
hp_body[l_foot] = 100;



stat[hp] = 100;
stat[sp] = 100;
stat[mp] = 100;
stat[morale] = 100;
stat[thirst] = 100;
stat[hunger] = 100;
stat[fatigue] = 100;
max_hp = 100;

//skills
skill[leadership] = 5;
skil[discipline] = 100
skill[dexterity] = 100;

//leading
orders[0, 0] = "follow" //action name
orders[0, 1] = id; //target

orders[1, 0] = "attack" //action name
orders[1, 1] = o.player; //target
//
spd = 15;
wspd = 5;

//
target = noone;
rank = noone;
class = noone;
master = noone;
action = noone;
action_name = noone;
//combat
weapon = noone;
weapon_type = rifle//choose(sword, dagger, cleaver, club, bow, handgun, rifle);
weapon_range = noone;
weapon_damage = noone;
weapon_cooldown = 10;
base_damage = 5;
damage_type = damage_single;
attack_type = attack_melee;
attack_range = 100;
attack_cooldown = weapon_cooldown;
is_attacked = false;
in_combat = false;
attacker = noone;
//faction
faction = noone;
faction_type = group_team;
faction_name = noone;
faction_capacity = 3;
faction_members[0] = id;
faction_members[faction_capacity] = noone;
//theme
main_col = c_yellow;
sec_col = c_red;
theme_col = c_aqua;
//path finding
grid = o.grid
path = noone
radd = instance_create(x, y, orad)
radd.master = id;
insight = false;
turn = 0
x3 = noone
y3 = noone;
diff = 0;
mark = noone
//AI
detected_objects[0] = noone
detected_units[0] = noone
detected_items[0] = noone;
//inventory
inv = ds_map_create()
//inv[? "ammo"] = 5;
left_hand = noone;
right_hand = noone;
back = noone;
/*
v_buff = vertex_create_buffer();
vertex_format_begin()
vertex_format_add_position();
vertex_format_add_colour();
vertex_format_add_textcoord();
v_format = vertex_format_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy
if(exists(master)){master.faction_capacity++;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///step
//
//vision_cone();
detect_objects();
switch_actions()
switch_weapon();

//stop unit from exiting room borders
x = clamp(x, 0, room_width)
y = clamp(y, 0, room_height)

if(exists(master)){
//get orders from master
    for(i=0;i&lt;array_height_2d(master.orders);i++){
        for(ii=0;ii&lt;array_length_2d(master.orders, i);ii++){
            orders[i, ii] = master.orders[i, ii];
        }
    }
    
    //switch(action_name){
        //case "follow":
            //target = orders[0, 1];
            //action_name = orders[0, 0];
            //action = act_follow_unit(target);
        //case "attack":
            //target = orders[0, 1];
            //action_name = orders[0, 0];
            //action = act_follow_unit(target);
       
        
    ///}
}

//kill
if(stat[hp]&lt;0){
if(exists(master)){master.faction_capacity++;}
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///officer
//OFFICER UNIT

if(rank==rank_officer){

    faction_type = group_team;
//get detected units
    for(i=0;i&lt;array_length_1d(detected_objects);i++){
        
        var unit = noone;
        
        if(exists(id.detected_objects[i]) and id.detected_objects[i].object_index==ounit){
            unit = id.detected_objects[i];
        };
        
//decide action based on unit's faction
        if(exists(unit)){
  
            if(unit.faction==noone){
                if(id.faction_capacity&gt;0){
                    target = unit;
                    action_name = "recruit";
                }
            } else
                
            if(unit.faction==faction){
                //instance_destroy(unit)
            } else
                
            if(unit.faction==faction_player){
                 instance_destroy(unit)
                 if(id.faction!=faction_player){
                    target = unit;
                    //action = act_attack_unit(target)
                    action_name = "attack"
                    orders[0, 0] = action_name;
                    orders[0, 1] = target;
                   
                }
            }

/*  
            if(unit.faction==faction_red){
                if(faction!=faction_red){
                    target = unit;
                    action = act_attack_unit(target)
                    action_name = "attack"
                    orders[0, 0] = action_name;
                    orders[0, 1] = target;
                }
            }
                
            if(unit.faction==faction_blue){
                if(faction!=faction_blue){
                    target = unit;
                    action = act_attack_unit(target)
                    action_name = "attack"
                    orders[0, 0] = action_name;
                    orders[0, 1] = target;
                }
            }
                
            if(unit.faction==faction_green){
                if(faction!=faction_green){
                    target = unit;
                    action = act_attack_unit(target)
                    action_name = "attack"
                    orders[0, 0] = action_name;
                    orders[0, 1] = target;
                }
            }
                
            if(unit.faction==faction_yellow){
                if(faction!=faction_yellow){
                    target = unit;
                    action = act_attack_unit(target)
                    action_name = "attack"
                    orders[0, 0] = action_name;
                    orders[0, 1] = target;
                }
            }*/
                   
        
        }
        
    }
}
//
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///alert 
//ACTION - alert nearby units if attacked
if(is_attacked){

    is_attacked = false;
    
    for(i=0;i&lt;array_length_1d(detected_objects);i++){
        
        var unit = noone;
        //
        if(exists(detected_objects[i])){
            unit = detected_objects[i];
        }
        
        if(exists(unit) and (unit.id!=o.player)){
            switch(unit.faction){
                case faction:
                    {
                    //unit.alert = true;
                    //show_message("")
                    unit.target = id.attacker;
                    target = id.attacker;
                    unit.action_name = "attack";
                    }
                    break;
            }
        }
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///pickup ammo
/*/ACTION - pick up ammo when ranged weapon is depleted
if(!has_item("ammo") and faction!=noone){
    for(i=0;i&lt;array_length_1d(detected_objects);i++){
        var item = detected_objects[i];
        if(exists(item) and (item.object_index==oitem)){
            if(item.item_type=="ammo"){
                target = item;
                action_name = "pickup";   
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vision_cone_3()
/*
{
    var ox,oy,dx,dy,object,prec,notme,sx,sy,inst,i;
    ox = argument0;
    oy = argument1;
    dx = argument2;
    dy = argument3;
    object = argument4;
    prec = argument5;
    notme = argument6;
    sx = dx - ox;
    sy = dy - oy;
    inst = collision_line(ox,oy,dx,dy,object,prec,notme);
    if (inst != noone) {
        while ((abs(sx) &gt;= 1) || (abs(sy) &gt;= 1)) {
            sx /= 2;
            sy /= 2;
            i = collision_line(ox,oy,dx,dy,object,prec,notme);
            if (i) {
                dx -= sx;
                dy -= sy;
                inst = i;
            }else{
                dx += sx;
                dy += sy;
            }
        }
    }
    return inst;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw
draw_cone = false
draw_unit = true

main_col = faction;
sec_col = c_red;
theme_col = faction;

unit_width = sprite_get_width(sblock)
unit_height = sprite_get_height(sblock)

//highlight unit
if(point_in_rectangle(mouse_x, mouse_y, x - unit_width/2, y - unit_height/2, x + unit_width/2, y + unit_height/2)){
    draw_set_color(theme_col);
    draw_cone = true
    //draw_set_alpha(0.5)
    draw_rectangle(x - unit_width/2, y - unit_height/2, x + unit_width/2, y + unit_height/2, false);
    //draw_set_alpha(1)
    
    if(exists(radd)){
        radd.draw = true;
    }
    
} else {
    if(exists(radd)){
        radd.draw = false;
    }
}

if(draw_unit){
    draw_set_color(faction);
    draw_circle(x, y, 32, false);
    
    draw_set_color(background_colour);
    draw_arrow(x, y, x + lengthdir_x(32, direction), y + lengthdir_y(32, direction), 32);
}

//draw collision border
draw_set_color(main_col)
draw_rectangle(x - unit_width/2, y - unit_height/2, x + unit_width/2, y + unit_height/2, true)
draw_set_alpha(0.4)
draw_rectangle(x - unit_width/2, y - unit_height/2, x + unit_width/2, y + unit_height/2, false)
draw_set_alpha(1)

if(exists(target)){

    //draw path and path points
    draw_set_color(c_white)
    if(path_exists(path)){
    
        draw_path(path, x, y, true)
        
        
        var i;
        points = floor(path_get_number(path));
        for(i=0;i&lt;points;i++){
            rad = 20;
            x_ = path_get_point_x(path, i);
            y_ = path_get_point_y(path, i);
            
            if(point_in_rectangle(mouse_x, mouse_y, x_ - rad, y_ - rad, x_ + rad, y_ + rad)){
                draw_circle(x_, y_, rad, false)
                draw_text(x_ - rad, y_ - rad * 2, string(i) + "/" + string(points-1))
            }
            
            draw_circle(x_, y_, rad/3, false)
        }
        
        
    }
    //check if target is in sight
    if(collision_line(x, y, target.x, target.y, oblock, true, true) != noone){insight = false;} else {insight = true;};
    if(!insight){draw_set_color(c_red)} else {draw_set_color(theme_col)}
    //draw_line(x, y, target.x, target.y)

}

//draw rank identifiers
if(rank==rank_officer){
    var h = y - unit_width;
    var str = "Officer";
    draw_set_color(sec_col)
    draw_line(x, y, x, h)
    draw_circle(x, h, 5, false)
    draw_set_halign(fa_center)
    draw_text(x, h - 30, str)
    draw_text(x, h - 60, target)
}

//draw health bar
if(faction!=noone){
var height = stat[hp] / max_hp * unit_height;
var width = 20;
var padd = 0;
var yy = y - unit_height/2;
var yyy = yy + height;
var xx = x + unit_width/2;
var xxx = xx + width;
draw_set_color(c_lime)
draw_rectangle(xx, yy, xxx, yyy, false)

//draw ammo count
var height = stat[hp] / max_hp * unit_height;
var width = 20;
var yy = y - unit_height/2;
var yyy = yy + width;
var xx = x + unit_width/2 + width+1;
var xxx = xx + width;
draw_set_color(c_black);
draw_rectangle(xx, yy, xxx, yyy, false);
draw_set_color(c_yellow);
var ammo_count = 0;
if(has_item("ammo")){
    ammo_count = inv[? "ammo"];
}

draw_text(xx+width/2, yy+4, string(ammo_count));

}

//lookaround if no target or no ammo
if(id!=o.player) and (!exists(target) or !has_item("ammo")){
    
    direction+=random(spd);
}

//draw vision cone



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
