<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sunit</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oent</parentName>
  <maskName>sbbox</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create
name = "unit";
age = noone;


//stats
hp_body[head] = 100;
hp_body[neck] = 100;
hp_body[chest] = 100;
hp_body[abdomen] = 100;
hp_body[r_eye] = 100;
hp_body[l_eye] = 100;
hp_body[r_ear] = 100;
hp_body[l_ear] = 100;
hp_body[r_shoulder] = 100;
hp_body[l_shoulder] = 100;
hp_body[r_arm] = 100;
hp_body[l_arm] = 100;
hp_body[r_elbow] = 100;
hp_body[l_elbow] = 100;
hp_body[r_wrist] = 100;
hp_body[l_wrist] = 100;
hp_body[r_hand] = 100;
hp_body[l_hand] = 100;
hp_body[r_thigh] = 100;
hp_body[l_thigh] = 100;
hp_body[r_leg] = 100;
hp_body[l_leg] = 100;
hp_body[r_knee] = 100;
hp_body[l_knee] = 100;
hp_body[r_foot] = 100;
hp_body[l_foot] = 100;



stat[hp] = 100;
stat[sp] = 100;
stat[mp] = 100;
stat[morale] = 100;
stat[thirst] = 100;
stat[hunger] = 100;
stat[fatigue] = 100;
max_hp = 100;

//skills
skill[leadership] = 5;
skil[discipline] = 100
skill[dexterity] = 100;

//leading
orders[0, 0] = "follow" //action name
orders[0, 1] = id; //target

orders[1, 0] = "attack" //action name
orders[1, 1] = o.player; //target
//
spd = 15;
wspd = 5;

//
target = noone;
rank = noone;
class = noone;
master = noone;
action = noone;
action_name = noone;
//combat
weapon = noone;
weapon_type = choose(sword, dagger, cleaver, club, bow, handgun, rifle);
weapon_range = noone;
weapon_damage = noone;
base_damage = 5;
damage_type = damage_single;
attack_type = attack_melee;
attack_range = 100;
attack_cooldown = 100;

//faction
faction = noone;
faction_type = group_team;
faction_name = noone;
//theme
main_col = c_yellow;
sec_col = c_red;
theme_col = c_aqua;
//path finding
grid = o.grid
path = noone
radd = instance_create(x, y, orad)
radd.master = id;
insight = false;
turn = 0
x3 = noone
y3 = noone;
diff = 0;
mark = noone
detected_objects[0] = noone
//inventory
inv = ds_map_create()
left_hand = noone;
right_hand = noone;
back = noone;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///step

//stop unit from exiting room borders
if(y &lt; 0 ){y = 0}
else if(y &gt; room_height){y = room_height;}
if(x &lt; 0){x = 0;}
else if(x &gt; room_width){x = room_width;}

//OFFICER UNIT
if(rank==rank_officer){

    faction_type = group_team;

    for(i=0;i&lt;array_length_1d(detected_objects);i++){
        
        var unit = noone;
        //
        if(exists(detected_objects[i]) and detected_objects[i].object_index==ounit){
            unit = detected_objects[i];
        }
        
        
        if(exists(unit)){
            
            switch(unit.faction){
            
                case noone:
                    {
                    target = unit;
                    action = act_recruit()
                    //detected_objects[i] = noone;
                    }
                    break;
                case faction:
                    {
                    
                    }
                    break;
                case faction_player:
                    {
                    //target = unit;
                    //action = act_follow_unit(target)
                    }
                    break;
                
            } 
        }
        
    }
}

if(exists(master)){

    for(i=0;i&lt;array_height_2d(master.orders);i++){
        for(ii=0;ii&lt;array_length_2d(master.orders, i);ii++){
            orders[i, ii] = master.orders[i, ii];
        }
    }
    
    
    action_name = orders[1, 0];
    //show_message(array_length_2d(master.orders, i))
    switch(action_name){
        case "follow":
            target = orders[0, 1];
            //action = act_follow_unit(target);
        case "attack":
            target = orders[1, 1];
            //action = act_follow_unit(target);
       
        
    }
}

//
switch_actions()
switch_weapon();
//
if(stat[hp]&lt;0){
    instance_destroy()
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw
var draw_cone = false
var draw_unit = true

main_col = faction;
sec_col = c_red;
theme_col = faction;
//if(faction==noone){faction=faction_neutral;}//brute force solution, need to track this down
unit_width = sprite_get_width(sblock)
unit_height = sprite_get_height(sblock)

//highlight unit
if(point_in_rectangle(mouse_x, mouse_y, x - unit_width/2, y - unit_height/2, x + unit_width/2, y + unit_height/2)){
    draw_set_color(theme_col);
    
    //draw_set_alpha(0.5)
    draw_rectangle(x - unit_width/2, y - unit_height/2, x + unit_width/2, y + unit_height/2, false);
    //draw_set_alpha(1)
    
    if(exists(radd)){
        radd.draw = true;
    }
    
} else {
    if(exists(radd)){
        radd.draw = false;
    }
}

if(draw_unit){
    draw_set_color(faction);
    draw_circle(x, y, 32, false);
    
    draw_set_color(background_colour);
    draw_arrow(x, y, x + lengthdir_x(32, direction), y + lengthdir_y(32, direction), 32);
}

//draw collision border
draw_set_color(main_col)
draw_rectangle(x - unit_width/2, y - unit_height/2, x + unit_width/2, y + unit_height/2, true)
draw_set_alpha(0.4)
draw_rectangle(x - unit_width/2, y - unit_height/2, x + unit_width/2, y + unit_height/2, false)
draw_set_alpha(1)






if(exists(target)){

    //draw path and path points
    draw_set_color(c_white)
    if(path_exists(path)){
    
        draw_path(path, x, y, true)
        
        
        var i;
        points = floor(path_get_number(path));
        for(i=0;i&lt;points;i++){
            rad = 20;
            x_ = path_get_point_x(path, i);
            y_ = path_get_point_y(path, i);
            
            if(point_in_rectangle(mouse_x, mouse_y, x_ - rad, y_ - rad, x_ + rad, y_ + rad)){
                draw_circle(x_, y_, rad, false)
                draw_text(x_ - rad, y_ - rad * 2, string(i) + "/" + string(points-1))
            }
            
            draw_circle(x_, y_, rad/3, false)
        }
        
        
    }
    //check if target is in sight
    if(collision_line(x, y, target.x, target.y, oblock, true, true) != noone){insight = false;} else {insight = true;};
    if(!insight){draw_set_color(c_red)} else {draw_set_color(theme_col)}
    draw_line(x, y, target.x, target.y)

}




//calculate and draw vision cone
if(o.debug and exists(radd)){
    
    var width = 20;
    
    var x2 = lengthdir_x(radd.rad, direction - width)
    var y2 = lengthdir_y(radd.rad, direction - width)
    
    var x1 = lengthdir_x(radd.rad, direction + width)
    var y1 = lengthdir_y(radd.rad, direction + width)
    
    var dir = direction;
    
    if(x3 == noone){x3 = x1;}
    if(y3 == noone){y3 = y1;}
    
    
    
    if(diff &lt; -width){
    
        turn = 1;
        draw_set_color(c_aqua)
    } 
    
    if(diff &gt; width){
    
        turn = 0;
        draw_set_color(c_white)
    } 
    
    x3 = lengthdir_x(radd.rad, (dir) + diff)
    y3 = lengthdir_y(radd.rad, (dir) + diff)
    
    if(turn == 0){
        diff--;
        detected_obj = collision_line(x, y, x + x3, y + y3, oent, true, true)
        
    } else 
    
    if(turn == 1){
        diff++;
        detected_obj = collision_line(x, y, x + x3, y + y3, oent, true, true)
    }
    
    if(detected_obj != noone){
    
            exist = false
            for(i=1;i&lt;array_length_1d(detected_objects);i++){
                if(detected_obj.id == detected_objects[i]){
                    exist = true;
                }
            }
            
            if(!exist){detected_objects[array_length_1d(detected_objects)] = detected_obj;}
        }
        
    if(id==o.player){
        //with(detected_obj){instance_destroy();}
    }

    if(draw_cone){
        draw_line(x, y, x + x1, y + y1)
        draw_line(x, y, x + x2, y + y2)
        
        draw_set_alpha(0.3)
        draw_triangle(x, y, x + x1, y + y1, x + x2, y + y2, false)
        draw_set_alpha(1)
        //draw_circle(x, y, radd.rad, true)
        
        if(collision_line(x, y, x3, y3, ounit, true, true)){
            draw_set_color(c_lime)
        }
        
        draw_arrow(x, y, x + x3, y + y3, 25)
    }
}

//image_angle = direction;

//draw rank identifiers
if(rank==rank_officer){
    var h = y - unit_width;
    var str = "Officer";
    draw_set_color(sec_col)
    draw_line(x, y, x, h)
    draw_circle(x, h, 5, false)
    draw_set_halign(fa_center)
    draw_text(x, h - 30, str)
    draw_text(x, h - 60, target)
}

//draw health bar
var height = stat[hp] / max_hp * unit_height;

var width = 20;
var padd = 0;

var yy = y - unit_height/2;
var yyy = yy + height;

var xx = x + unit_width/2;
var xxx = xx + width;

draw_set_color(c_lime)
draw_rectangle(xx, yy, xxx, yyy, false)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
